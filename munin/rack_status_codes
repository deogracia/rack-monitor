#!/usr/bin/perl
#
# Plugin to monitor status code responses of a rack server process.
#
# This configuration section shows the defaults of the plugin:
#
#   [rack_*]
#      env.url   http://127.0.0.1:%d/status
#      env.ports 80
#
# Parameters supported:
#
#   config   (required)
#
# Magic markers - optional - used by installation scripts and munin-config:
#
#%# family=manual

my $ret = undef;

if (! eval "require LWP::UserAgent;")
{
    $ret = "LWP::UserAgent not found";
}

my $URL = exists $ENV{'url'} ? $ENV{'url'} : "http://127.0.0.1:%d/rack_status";
my @PORTS = exists $ENV{'ports'} ? split(' ', $ENV{'ports'}) : (80);

my %CODES = (200 => 200, 403 => 403, 404 => 404,
1 => "1xx", 2 => "2xx", 3 => "3xx", 4 => "4xx", 5 => "5xx");

if ( defined $ARGV[0] and $ARGV[0] eq "autoconf" )
{
    if ($ret)
    {
        print "no ($ret)\n";
        exit 1;
    }

    my $ua = LWP::UserAgent->new(timeout => 30);

    my @badports;
    foreach my $port (@PORTS) {
        my $url = sprintf $URL, $port;
        my $response = $ua->request(HTTP::Request->new('GET',$url));
        push @badports, $port unless $response->is_success and $response->content =~ /^\[Version:rack_info\]/m;
    }
    if (@badports) {
        print "no (no rack server status on ports @badports)\n";
        exit 1;
    } else {
        print "yes\n";
        exit 0;
    }
}

if ( defined $ARGV[0] and $ARGV[0] eq "config" )
{
    print "graph_title Response codes (in percent)\n";
    print "graph_args --upper-limit 100 -l 0\n";
    print "graph_vlabel %\n";
    print "graph_scale no\n";
    print "graph_category Http\n";
    foreach my $port (@PORTS) {
        foreach my $code (sort(keys(%CODES))) {
            print "status${code}.label Status $CODES{$code}\n";
        }
    }
    exit 0;
}

my $ua = LWP::UserAgent->new(timeout => 30);

my $request_total = 0;
my %status_total = {};
foreach my $code (keys(%CODES)) { $status_total{$code} = 0; }

foreach my $port (@PORTS) {
    my $url = sprintf $URL, $port;
    my $response = $ua->request(HTTP::Request->new('GET',$url));
    if ($response->content =~ /^\[Request:count\].*:\s+(.+)$/im) {
        $request_total += $1;
    }
    foreach my $code (keys(%CODES)) {
        if ($response->content =~ /^\[Request:status$code\].*:\s+(.+)$/im) {
            $status_total{$code} += $1;
        }
    }
}
foreach my $code (sort(keys(%CODES))) {
    if ($request_total> 0) {
        my $percentage = $status_total{$code}/$request_total*100;
        print "status${code}.value $percentage\n";
    } else {
        print "status${code}.value U\n";
    }
}
